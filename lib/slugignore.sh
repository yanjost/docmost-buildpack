#!/usr/bin/env bash
set -e
trap 'echo "[ERROR] $0 failed at line $LINENO: $BASH_COMMAND" >&2' ERR
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common.sh"

write_slugignore() {
  local SLUGIGNORE_FILE="$BUILD_DIR/.slugignore"

  step "Slugignore" "Configuring .slugignore for optimal slug size"

  # Check if .slugignore already exists
  if [[ -f "$SLUGIGNORE_FILE" ]]; then
    step "Slugignore" "Appending to existing .slugignore"
  else
    step "Slugignore" "Creating .slugignore"
  fi

  # Append our optimizations (use heredoc with marker to avoid duplicates)
  if ! grep -q "# >>> DOCMOST BUILDPACK OPTIMIZATIONS >>>" "$SLUGIGNORE_FILE" 2>/dev/null; then
    cat >> "$SLUGIGNORE_FILE" <<'SLUGIGNORE_EOF'

# >>> DOCMOST BUILDPACK OPTIMIZATIONS >>>
# Auto-generated by docmost-buildpack to reduce slug size
# These files are only needed during build, not at runtime

# Git files
.git/
.gitignore
.github/

# Development files
.vscode/
.idea/
.editorconfig

# Documentation
docs/
*.md
README*
CHANGELOG*
LICENSE*

# Test files
test/
tests/
__tests__/
**/*.test.js
**/*.test.ts
**/*.spec.js
**/*.spec.ts
coverage/
.nyc_output/
jest.config.*
vitest.config.*

# Development configs
.env.example
.env.local
.env.development
docker-compose*.yml
Dockerfile*
.dockerignore
.prettierrc*
.eslintrc*
.eslintignore
tsconfig.json
tsconfig.*.json

# Build artifacts and source files (keep only dist)
apps/client/src/
apps/server/src/
packages/*/src/
*.ts
*.tsx
!*.d.ts

# Build-only node_modules (packages only needed during build)
# Remove Nx build system (~50-80MB)
node_modules/.pnpm/nx@*/
node_modules/.pnpm/@nx+*/
node_modules/@nx/
node_modules/nx/

# Remove Vite bundler (~10-15MB)
node_modules/.pnpm/vite@*/
node_modules/vite/

# Remove TypeScript compiler (~20-30MB)
node_modules/.pnpm/typescript@*/
node_modules/typescript/

# Remove testing frameworks
node_modules/.pnpm/vitest@*/
node_modules/.pnpm/jest@*/
node_modules/vitest/
node_modules/jest/

# Remove build tools
node_modules/.pnpm/concurrently@*/
node_modules/concurrently/

# Node modules cache directories
node_modules/.cache/
node_modules/.vite/
.pnpm-store/

# Nx cache
.nx/
dist/.nx/

# Cache and temporary files
.cache/
tmp/
temp/
*.tmp
.DS_Store
*.log

# Frontend build source maps (large files)
dist/**/*.map
apps/client/dist/**/*.map

# Unnecessary mermaid locales (keep only English)
# This saves ~500KB per locale file
apps/client/dist/assets/*-[A-Z][A-Z]-*.js
!apps/client/dist/assets/en-*.js

# <<< DOCMOST BUILDPACK OPTIMIZATIONS <<<
SLUGIGNORE_EOF
    step "Slugignore" "Added Docmost-specific optimizations"
  else
    step "Slugignore" "Optimizations already present, skipping"
  fi
}
